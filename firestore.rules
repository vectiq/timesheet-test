rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isInvited() {
      return exists(/databases/$(database)/documents/members/$(request.auth.uid));
    }
    
    function isAdmin() {
      return get(/databases/$(database)/documents/members/$(request.auth.uid)).data.role == 'admin';
    }
    
    // Members collection
    match /members/{userId} {
      allow read: if isAuthenticated() && (
        request.auth.uid == userId || 
        get(/databases/$(database)/documents/members/$(request.auth.uid)).data.role == 'admin'
      );
      allow create: if false; // Only through Cloud Functions (invitations)
      allow update: if isAuthenticated() && (
        request.auth.uid == userId || 
        isAdmin()
      );
    }
    
    // Clients collection
    match /clients/{clientId} {
      allow read: if isAuthenticated() && isInvited();
      allow write: if isAuthenticated() && isAdmin();
    }
    
    // Projects collection
    match /projects/{projectId} {
      allow read: if isAuthenticated() && isInvited();
      allow write: if isAuthenticated() && isAdmin();
      
      // Project roles subcollection
      match /roles/{roleId} {
        allow read: if isAuthenticated() && isInvited();
        allow write: if isAuthenticated() && isAdmin();
      }
    }
    
    // Time entries collection
    match /timeEntries/{entryId} {
      allow read: if isAuthenticated() && (
        resource.data.userId == request.auth.uid || 
        isAdmin()
      );
      allow create: if isAuthenticated() && 
        request.resource.data.userId == request.auth.uid;
      allow update: if isAuthenticated() && (
        resource.data.userId == request.auth.uid || 
        isAdmin()
      );
      // No direct deletion - use status updates instead
      allow delete: if false;
    }
  }
}